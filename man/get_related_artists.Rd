% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_related_artists.R
\name{get_related_artists}
\alias{get_related_artists}
\title{Get Related Artists}
\usage{
get_related_artists(artist_name = NULL, artist_uri = NULL,
  use_artist_uri = FALSE, return_closest_artist = TRUE,
  access_token = get_spotify_access_token())
}
\arguments{
\item{artist_name}{String of artist name}

\item{artist_uri}{String of Spotify artist URI. Will only be applied if \code{use_arist_uri} is set to \code{TRUE}. This is useful for pulling related artists in bulk and allows for more accurate matching since Spotify URIs are unique.}

\item{use_artist_uri}{Boolean determining whether to search by Spotify URI instead of an artist name. If \code{TRUE}, you must also enter an \code{artist_uri}. Defaults to \code{FALSE}.}

\item{return_closest_artist}{Boolean determining whether to use string distance automatically return the closest match for \code{artist_name}. Only applies if \code{use_artist_uri} is set to \code{FALSE}.}

\item{access_token}{Spotify Web API token. Defaults to \code{spotifyr::get_spotify_access_token()}.}
}
\description{
This function searches Spotify's library for artists by name or Spotify URI and returns related artists using Spotify's "Related Artists" API endpoint.
}
\examples{
\dontrun{
get_related_artists('radiohead')

## If you know the Spotify URI for the artist (or more likely, artists) you're looking for,
set use_artist_uri to TRUE and use artist_uri.
purrr::map_df(bunch_of_artist_uris, function(this_artist_uri) {
    get_related_artists(artist_uri = this_artist_uri, use_artist_uri = TRUE)
})
}
}
\keyword{artists}
\keyword{related}
